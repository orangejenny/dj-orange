from argparse import RawTextHelpFormatter
from datetime import date
import json
import re

from django.core.management.base import BaseCommand, CommandError

from kilo.models import Day, Workout


class Command(BaseCommand):
    def create_parser(self, *args, **kwargs):
        parser = super(Command, self).create_parser(*args, **kwargs)
        parser.formatter_class = RawTextHelpFormatter
        return parser

    @property
    def help(self):
        return "Import both days and workouts from a json file, as generated by the miles repo's data.pl"

    def add_arguments(self, parser):
        parser.add_argument('filename', help="JSON file of data")
        parser.add_argument('--save', action='store_true')

    def handle(self, *args, **options):
        filename = options['filename']
        save = options['save']

        with open(filename, encoding='utf-8') as f:
            data = json.load(f)
            for day_json in data:
                day_parts = [int(part) for part in re.split(r'\D+', day_json['DAY'])]
                day = Day(day=date(year=day_parts[0], month=day_parts[1], day=day_parts[2]), notes=day_json['NOTES'])
                if save:
                    day.save()
                for workout_json in day_json['WORKOUTS']:
                    if not workout_json['ACTIVITY']:
                       continue
                    workout = Workout(
                        activity=workout_json['ACTIVITY'],
                        seconds=workout_json['TIME'],
                        distance=workout_json['DISTANCE'],
                        distance_unit=workout_json['UNIT'],
                        sets=workout_json['SETS'],
                        reps=workout_json['REPS'],
                        weight=workout_json['WEIGHT'],
                        day=day,
                    )
                    if save:
                        workout.save()
            self.stdout.write("{}Imported {} days".format("" if save else "[DRY RUN] ", len(data)))

